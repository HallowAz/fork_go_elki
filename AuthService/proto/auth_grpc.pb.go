// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: auth.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionRPCClient is the client API for SessionRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionRPCClient interface {
	Create(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*Nothing, error)
	Check(ctx context.Context, in *SessionToken, opts ...grpc.CallOption) (*Cookie, error)
	Delete(ctx context.Context, in *DBDeleteCookie, opts ...grpc.CallOption) (*Nothing, error)
	Expire(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*Nothing, error)
	CreateCsrf(ctx context.Context, in *SesionAndCsrf, opts ...grpc.CallOption) (*Nothing, error)
	GetCsrf(ctx context.Context, in *SessionToken, opts ...grpc.CallOption) (*CsrfToken, error)
}

type sessionRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionRPCClient(cc grpc.ClientConnInterface) SessionRPCClient {
	return &sessionRPCClient{cc}
}

func (c *sessionRPCClient) Create(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/auth.SessionRPC/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRPCClient) Check(ctx context.Context, in *SessionToken, opts ...grpc.CallOption) (*Cookie, error) {
	out := new(Cookie)
	err := c.cc.Invoke(ctx, "/auth.SessionRPC/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRPCClient) Delete(ctx context.Context, in *DBDeleteCookie, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/auth.SessionRPC/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRPCClient) Expire(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/auth.SessionRPC/Expire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRPCClient) CreateCsrf(ctx context.Context, in *SesionAndCsrf, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/auth.SessionRPC/CreateCsrf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionRPCClient) GetCsrf(ctx context.Context, in *SessionToken, opts ...grpc.CallOption) (*CsrfToken, error) {
	out := new(CsrfToken)
	err := c.cc.Invoke(ctx, "/auth.SessionRPC/GetCsrf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionRPCServer is the server API for SessionRPC service.
// All implementations should embed UnimplementedSessionRPCServer
// for forward compatibility
type SessionRPCServer interface {
	Create(context.Context, *Cookie) (*Nothing, error)
	Check(context.Context, *SessionToken) (*Cookie, error)
	Delete(context.Context, *DBDeleteCookie) (*Nothing, error)
	Expire(context.Context, *Cookie) (*Nothing, error)
	CreateCsrf(context.Context, *SesionAndCsrf) (*Nothing, error)
	GetCsrf(context.Context, *SessionToken) (*CsrfToken, error)
}

// UnimplementedSessionRPCServer should be embedded to have forward compatible implementations.
type UnimplementedSessionRPCServer struct {
}

func (UnimplementedSessionRPCServer) Create(context.Context, *Cookie) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSessionRPCServer) Check(context.Context, *SessionToken) (*Cookie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedSessionRPCServer) Delete(context.Context, *DBDeleteCookie) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSessionRPCServer) Expire(context.Context, *Cookie) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expire not implemented")
}
func (UnimplementedSessionRPCServer) CreateCsrf(context.Context, *SesionAndCsrf) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCsrf not implemented")
}
func (UnimplementedSessionRPCServer) GetCsrf(context.Context, *SessionToken) (*CsrfToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCsrf not implemented")
}

// UnsafeSessionRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionRPCServer will
// result in compilation errors.
type UnsafeSessionRPCServer interface {
	mustEmbedUnimplementedSessionRPCServer()
}

func RegisterSessionRPCServer(s grpc.ServiceRegistrar, srv SessionRPCServer) {
	s.RegisterService(&SessionRPC_ServiceDesc, srv)
}

func _SessionRPC_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cookie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRPCServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SessionRPC/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRPCServer).Create(ctx, req.(*Cookie))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRPC_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRPCServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SessionRPC/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRPCServer).Check(ctx, req.(*SessionToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBDeleteCookie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SessionRPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRPCServer).Delete(ctx, req.(*DBDeleteCookie))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRPC_Expire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cookie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRPCServer).Expire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SessionRPC/Expire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRPCServer).Expire(ctx, req.(*Cookie))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRPC_CreateCsrf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SesionAndCsrf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRPCServer).CreateCsrf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SessionRPC/CreateCsrf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRPCServer).CreateCsrf(ctx, req.(*SesionAndCsrf))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionRPC_GetCsrf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionRPCServer).GetCsrf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.SessionRPC/GetCsrf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionRPCServer).GetCsrf(ctx, req.(*SessionToken))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionRPC_ServiceDesc is the grpc.ServiceDesc for SessionRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.SessionRPC",
	HandlerType: (*SessionRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SessionRPC_Create_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _SessionRPC_Check_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SessionRPC_Delete_Handler,
		},
		{
			MethodName: "Expire",
			Handler:    _SessionRPC_Expire_Handler,
		},
		{
			MethodName: "CreateCsrf",
			Handler:    _SessionRPC_CreateCsrf_Handler,
		},
		{
			MethodName: "GetCsrf",
			Handler:    _SessionRPC_GetCsrf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
