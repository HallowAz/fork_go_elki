// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	dto "server/internal/domain/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecaseI is a mock of UsecaseI interface.
type MockUsecaseI struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseIMockRecorder
}

// MockUsecaseIMockRecorder is the mock recorder for MockUsecaseI.
type MockUsecaseIMockRecorder struct {
	mock *MockUsecaseI
}

// NewMockUsecaseI creates a new mock instance.
func NewMockUsecaseI(ctrl *gomock.Controller) *MockUsecaseI {
	mock := &MockUsecaseI{ctrl: ctrl}
	mock.recorder = &MockUsecaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseI) EXPECT() *MockUsecaseIMockRecorder {
	return m.recorder
}

// AddProductToCart mocks base method.
func (m *MockUsecaseI) AddProductToCart(SessionToken string, productID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductToCart", SessionToken, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProductToCart indicates an expected call of AddProductToCart.
func (mr *MockUsecaseIMockRecorder) AddProductToCart(SessionToken, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductToCart", reflect.TypeOf((*MockUsecaseI)(nil).AddProductToCart), SessionToken, productID)
}

// DeleteProductFromCart mocks base method.
func (m *MockUsecaseI) DeleteProductFromCart(SessionToken string, productID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductFromCart", SessionToken, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductFromCart indicates an expected call of DeleteProductFromCart.
func (mr *MockUsecaseIMockRecorder) DeleteProductFromCart(SessionToken, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductFromCart", reflect.TypeOf((*MockUsecaseI)(nil).DeleteProductFromCart), SessionToken, productID)
}

// GetUserCart mocks base method.
func (m *MockUsecaseI) GetUserCart(SessionToken string) ([]*dto.CartProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCart", SessionToken)
	ret0, _ := ret[0].([]*dto.CartProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCart indicates an expected call of GetUserCart.
func (mr *MockUsecaseIMockRecorder) GetUserCart(SessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCart", reflect.TypeOf((*MockUsecaseI)(nil).GetUserCart), SessionToken)
}

// UpdateItemCountDown mocks base method.
func (m *MockUsecaseI) UpdateItemCountDown(SessionToken string, productID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemCountDown", SessionToken, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemCountDown indicates an expected call of UpdateItemCountDown.
func (mr *MockUsecaseIMockRecorder) UpdateItemCountDown(SessionToken, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemCountDown", reflect.TypeOf((*MockUsecaseI)(nil).UpdateItemCountDown), SessionToken, productID)
}

// UpdateItemCountUp mocks base method.
func (m *MockUsecaseI) UpdateItemCountUp(SessionToken string, productID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemCountUp", SessionToken, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemCountUp indicates an expected call of UpdateItemCountUp.
func (mr *MockUsecaseIMockRecorder) UpdateItemCountUp(SessionToken, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemCountUp", reflect.TypeOf((*MockUsecaseI)(nil).UpdateItemCountUp), SessionToken, productID)
}
