// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	dto "server/internal/domain/dto"
	entity "server/internal/domain/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecaseI is a mock of UsecaseI interface.
type MockUsecaseI struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseIMockRecorder
}

// MockUsecaseIMockRecorder is the mock recorder for MockUsecaseI.
type MockUsecaseIMockRecorder struct {
	mock *MockUsecaseI
}

// NewMockUsecaseI creates a new mock instance.
func NewMockUsecaseI(ctrl *gomock.Controller) *MockUsecaseI {
	mock := &MockUsecaseI{ctrl: ctrl}
	mock.recorder = &MockUsecaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseI) EXPECT() *MockUsecaseIMockRecorder {
	return m.recorder
}

// GetRestaurantById mocks base method.
func (m *MockUsecaseI) GetRestaurantById(id uint) (*entity.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantById", id)
	ret0, _ := ret[0].(*entity.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantById indicates an expected call of GetRestaurantById.
func (mr *MockUsecaseIMockRecorder) GetRestaurantById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantById", reflect.TypeOf((*MockUsecaseI)(nil).GetRestaurantById), id)
}

// GetRestaurantProducts mocks base method.
func (m *MockUsecaseI) GetRestaurantProducts(id uint) ([]*dto.MenuTypeWithProducts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantProducts", id)
	ret0, _ := ret[0].([]*dto.MenuTypeWithProducts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantProducts indicates an expected call of GetRestaurantProducts.
func (mr *MockUsecaseIMockRecorder) GetRestaurantProducts(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantProducts", reflect.TypeOf((*MockUsecaseI)(nil).GetRestaurantProducts), id)
}

// GetRestaurants mocks base method.
func (m *MockUsecaseI) GetRestaurants() ([]*entity.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurants")
	ret0, _ := ret[0].([]*entity.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurants indicates an expected call of GetRestaurants.
func (mr *MockUsecaseIMockRecorder) GetRestaurants() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurants", reflect.TypeOf((*MockUsecaseI)(nil).GetRestaurants))
}
