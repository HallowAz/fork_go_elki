// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	entity "server/internal/domain/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockRestaurantRepositoryI is a mock of RestaurantRepositoryI interface.
type MockRestaurantRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantRepositoryIMockRecorder
}

// MockRestaurantRepositoryIMockRecorder is the mock recorder for MockRestaurantRepositoryI.
type MockRestaurantRepositoryIMockRecorder struct {
	mock *MockRestaurantRepositoryI
}

// NewMockRestaurantRepositoryI creates a new mock instance.
func NewMockRestaurantRepositoryI(ctrl *gomock.Controller) *MockRestaurantRepositoryI {
	mock := &MockRestaurantRepositoryI{ctrl: ctrl}
	mock.recorder = &MockRestaurantRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestaurantRepositoryI) EXPECT() *MockRestaurantRepositoryIMockRecorder {
	return m.recorder
}

// GetRestaurants mocks base method.
func (m *MockRestaurantRepositoryI) GetRestaurants() ([]*entity.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurants")
	ret0, _ := ret[0].([]*entity.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurants indicates an expected call of GetRestaurants.
func (mr *MockRestaurantRepositoryIMockRecorder) GetRestaurants() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurants", reflect.TypeOf((*MockRestaurantRepositoryI)(nil).GetRestaurants))
}
