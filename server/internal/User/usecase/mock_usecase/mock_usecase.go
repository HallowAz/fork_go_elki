// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	entity "server/internal/domain/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecaseI is a mock of UsecaseI interface.
type MockUsecaseI struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseIMockRecorder
}

// MockUsecaseIMockRecorder is the mock recorder for MockUsecaseI.
type MockUsecaseIMockRecorder struct {
	mock *MockUsecaseI
}

// NewMockUsecaseI creates a new mock instance.
func NewMockUsecaseI(ctrl *gomock.Controller) *MockUsecaseI {
	mock := &MockUsecaseI{ctrl: ctrl}
	mock.recorder = &MockUsecaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseI) EXPECT() *MockUsecaseIMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsecaseI) CreateUser(new_user *entity.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", new_user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsecaseIMockRecorder) CreateUser(new_user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsecaseI)(nil).CreateUser), new_user)
}

// UpdateUser mocks base method.
func (m *MockUsecaseI) UpdateUser(newUser *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", newUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUsecaseIMockRecorder) UpdateUser(newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUsecaseI)(nil).UpdateUser), newUser)
}
