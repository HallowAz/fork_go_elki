// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	dto "server/internal/domain/dto"
	entity "server/internal/domain/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecaseI is a mock of UsecaseI interface.
type MockUsecaseI struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseIMockRecorder
}

// MockUsecaseIMockRecorder is the mock recorder for MockUsecaseI.
type MockUsecaseIMockRecorder struct {
	mock *MockUsecaseI
}

// NewMockUsecaseI creates a new mock instance.
func NewMockUsecaseI(ctrl *gomock.Controller) *MockUsecaseI {
	mock := &MockUsecaseI{ctrl: ctrl}
	mock.recorder = &MockUsecaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseI) EXPECT() *MockUsecaseIMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockUsecaseI) Check(SessionToken string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", SessionToken)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockUsecaseIMockRecorder) Check(SessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockUsecaseI)(nil).Check), SessionToken)
}

// CreateCookieAuth mocks base method.
func (m *MockUsecaseI) CreateCookieAuth(cookie *entity.Cookie) (*dto.ReqGetUserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCookieAuth", cookie)
	ret0, _ := ret[0].(*dto.ReqGetUserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCookieAuth indicates an expected call of CreateCookieAuth.
func (mr *MockUsecaseIMockRecorder) CreateCookieAuth(cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCookieAuth", reflect.TypeOf((*MockUsecaseI)(nil).CreateCookieAuth), cookie)
}

// GetIdByCookie mocks base method.
func (m *MockUsecaseI) GetIdByCookie(SessionToken string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdByCookie", SessionToken)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdByCookie indicates an expected call of GetIdByCookie.
func (mr *MockUsecaseIMockRecorder) GetIdByCookie(SessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdByCookie", reflect.TypeOf((*MockUsecaseI)(nil).GetIdByCookie), SessionToken)
}

// GetUserProfile mocks base method.
func (m *MockUsecaseI) GetUserProfile(sessionToken string) (*dto.ReqGetUserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", sessionToken)
	ret0, _ := ret[0].(*dto.ReqGetUserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUsecaseIMockRecorder) GetUserProfile(sessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUsecaseI)(nil).GetUserProfile), sessionToken)
}

// Login mocks base method.
func (m *MockUsecaseI) Login(user *entity.User) (*entity.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", user)
	ret0, _ := ret[0].(*entity.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUsecaseIMockRecorder) Login(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsecaseI)(nil).Login), user)
}

// Logout mocks base method.
func (m *MockUsecaseI) Logout(cookie *entity.Cookie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", cookie)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockUsecaseIMockRecorder) Logout(cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUsecaseI)(nil).Logout), cookie)
}
