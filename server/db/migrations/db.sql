CREATE TABLE IF NOT EXISTS public.USERS
(
    ID serial NOT NULL,
    USERNAME text UNIQUE NOT NULL  ,
	PASSWORD text NOT NULL,
	BIRTHDAY date,
	PHONE_NUMBER text UNIQUE NOT NULL,
    EMAIL text UNIQUE NOT NULL,
	ICON text default 'deficon',
    PRIMARY KEY (ID),
    CONSTRAINT VALID_USERNAME CHECK ( LENGTH(USERNAME) > 3 and LENGTH(USERNAME) < 20 ),
    CONSTRAINT VALID_PASSWORD CHECK ( LENGTH(PASSWORD) > 8 and LENGTH(PASSWORD) < 30 ),
    CONSTRAINT VALID_PHONE CHECK ( PHONE_NUMBER ~* '/\+7[0-9]{10}/'),
    CONSTRAINT VALID_EMAIL CHECK ( EMAIL ~* '\S*@\S*' and LENGTH(EMAIL) < 40)
);

CREATE TABLE IF NOT EXISTS public.RESTAURANT
(
    ID serial NOT NULL,
    NAME text UNIQUE NOT NULL,
	RATING numeric(2,1) default 0.0 NOT NULL,
	COMMENTS_COUNT integer default 0 NOT NULL,
	ICON text default 'deficon' NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT VALID_RESTAURANT CHECK ( LENGTH(NAME) > 0 and LENGTH(NAME) < 40 ),
    CONSTRAINT VALID_RATING CHECK ( RATING >= 0.0 AND RATING <= 5.0),
    CONSTRAINT VALID_COMMENTS_COUNT CHECK (COMMENTS_COUNT >= 0)
);

CREATE TABLE IF NOT EXISTS public.CATEGORY
(
    ID serial NOT NULL,
    NAME text UNIQUE NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT VALID_TEXT CHECK ( LENGTH(NAME) > 0 and LENGTH(NAME) < 40 )
);

CREATE TABLE IF NOT EXISTS public.RESTAURANT_CATEGORY
(
    ID serial NOT NULL,
    RESTAURANT_ID int REFERENCES public.RESTAURANT(ID) NOT NULL,
    CATEGORY_ID int REFERENCES public.CATEGORY(ID) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS public.MENU_TYPE
(
    ID serial NOT NULL,
    NAME text default 'FOOD' NOT NULL,
    RESTAURANT_ID int REFERENCES RESTAURANT(ID) NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT VALID_MENU_TYPE CHECK ( LENGTH(NAME) > 0 and LENGTH(NAME) < 40 )
);

CREATE TABLE IF NOT EXISTS public.PRODUCT
(
    ID serial NOT NULL,
    NAME text NOT NULL, -- У блюда не может быть дефолтного значения, иначе как нам понять что это
    RESTAURANT_ID INT REFERENCES RESTAURANT(ID) NOT NULL,
    PRICE numeric(10,2) default '0.0' NOT NULL,
    COOKING_TIME INT default '0' NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT VALID_PRODUCT CHECK ( LENGTH(NAME) > 0 and LENGTH(NAME) < 40 ),
    CONSTRAINT VALID_PRICE CHECK ( PRICE >= 0.0 ),
    CONSTRAINT VALID_TIME CHECK ( COOKING_TIME >= 0 )
);

CREATE TABLE IF NOT EXISTS public.PRODUCT_MENU_TYPE
(
    ID serial NOT NULL,
    MENU_TYPE_ID int REFERENCES public.MENU_TYPE(ID) NOT NULL,
    PRODUCT_ID int REFERENCES public.PRODUCT(ID) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS public.ORDER
(
    ID serial NOT NULL,
    USER_ID int REFERENCES public.USERS(ID) NOT NULL,
    ORDER_DATE TIMESTAMP WITH TIME ZONE default NOW() NOT NULL,
    STATUS text default 'CREATED' NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT VALID_STATUS CHECK (LENGTH(STATUS) >= 0 and LENGTH(STATUS) < 40 )
);

CREATE TABLE IF NOT EXISTS public.ORDER_PRODUCT
(
    ID serial NOT NULL,
    PRODUCT_ID int REFERENCES public.PRODUCT(ID) NOT NULL,
    ORDER_ID int REFERENCES public.ORDER(ID) NOT NULL,
    ITEM_COUNT INT default 1 NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT VALID_COUNT CHECK ( ITEM_COUNT > 0 )
);

CREATE TABLE IF NOT EXISTS public.COMMENT
(
    ID serial NOT NULL,
    COMMENT_TEXT TEXT,  -- бывают комментарии без текста
    RESTAURANT_ID INT REFERENCES RESTAURANT(ID) NOT NULL,
    USER_ID int REFERENCES public.USERS(ID) NOT NULL,
    RATING numeric(2,1) default 0.0 NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT VALID_COUNT CHECK ( RATING >= 0.0 AND RATING <= 5.0)
);

CREATE TABLE IF NOT EXISTS public.ADDRESS
(
    ID serial NOT NULL,
    CITY text NOT NULL,
    STREET text NOT NULL,
    HOUSE_NUMBER INT NOT NULL,
    FLAT_NUMBER INT, -- бывают ДОМА БЕЗ КВАРТИР
    PRIMARY KEY (ID),
    CONSTRAINT VALID_CITY CHECK (LENGTH(CITY) > 0 and LENGTH(CITY) < 40 ),
    CONSTRAINT VALID_STREET CHECK (LENGTH(STREET) > 0 and LENGTH(STREET) < 40 ),
    CONSTRAINT VALID_HOUSE_VALID CHECK (HOUSE_NUMBER > 0 ),
    CONSTRAINT VALID_FLAT_NUMBER CHECK (FLAT_NUMBER > 0 )
);

CREATE TABLE IF NOT EXISTS public.RESTAURANT_ADDRESS
(
    ID serial NOT NULL,
    RESTAURANT_ID INT REFERENCES RESTAURANT(ID) NOT NULL,
    ADDRESS_ID INT REFERENCES ADDRESS(ID) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS public.USER_ADDRESS
(
    ID serial NOT NULL,
    USER_ID int REFERENCES public.USERS(ID) NOT NULL,
    ADDRESS_ID INT REFERENCES ADDRESS(ID) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS public.CARD
(
    ID serial NOT NULL,
    CARD_NUMBER text NOT NULL, --ДЕФОЛТНЫЙ НОМЕР КАРТЫ ЭТО СТРАННО
    USER_ID int REFERENCES public.USERS(ID) NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT VALID_CARD CHECK (LENGTH(CARD_NUMBER) > 0 and LENGTH(CARD_NUMBER) < 40)
);
